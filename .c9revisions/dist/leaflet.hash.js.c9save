{"ts":1354294782206,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n\n  L.Hash = function(map, layerControl) {\n    this.onHashChange = L.Util.bind(this.onHashChange, this);\n    if (map && layerControl) {\n      this.init(map, layerControl);\n    }\n    if (map) {\n      return this.init(map);\n    }\n  };\n\n  L.Hash.prototype = {\n    map: null,\n    lastHash: null,\n    layerControl: null,\n    init: function(map, layerControl) {\n      this.map = map;\n      if (layerControl) {\n        this.layerControl = layerControl;\n      }\n      return true;\n    },\n    getLayers: function() {\n      var base, cLayers, key, overlay;\n      base = void 0;\n      cLayers = void 0;\n      key = void 0;\n      overlay = void 0;\n      cLayers = this.layerControl._layers;\n      overlay = [];\n      base = void 0;\n      for (key in cLayers) {\n        if (cLayers[key].layer._leaflet_id && cLayers[key].layer._leaflet_id in this.map._layers) {\n          if (cLayers[key].overlay) {\n            overlay.push(encodeURIComponent(cLayers[key].name));\n          } else {\n            base = encodeURIComponent(cLayers[key].name);\n          }\n        }\n      }\n      return {\n        overlay: overlay,\n        base: base\n      };\n    },\n    getMapHash: function() {\n      var center, hashArray, precision, zoom;\n      center = this.map.getCenter();\n      zoom = this.map.getZoom();\n      precision = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));\n      return hashArray = [zoom, center.lat.toFixed(precision), center.lng.toFixed(precision)];\n    },\n    getHash: function() {\n      var hash, layers;\n      hash = this.getMapHash();\n      if (this.layerControl) {\n        layers = this.getLayer();\n      }\n      layers.zoom = hash.shift();\n      layers.center = hash;\n      return layers;\n    }\n  };\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":1729}]],"length":1729}
